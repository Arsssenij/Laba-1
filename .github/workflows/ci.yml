name: Build and Release for Linux and macOS

on:
  push:
    branches:
      - main  # Ветка, при пуше в которую будет запускаться workflow

jobs:
  # Workflow для сборки и релиза на macOS
  build-macos:
    runs-on: macos-latest  # Указываем, что сборка выполняется на macOS
    permissions: write-all  # Разрешения для записи (используются для создания релизов и загрузки артефактов)
    steps:
      # Чекаут кода из репозитория
      - uses: actions/checkout@v3
        with:
          submodules: true  # Также чекаутим подмодули, если они есть

      # Установка зависимостей для macOS через Homebrew
      - name: Install dependencies
        run: brew update && brew install boost  # Устанавливаем Boost, требуемый для сборки проекта

      # Конфигурация проекта с указанием версии (PATCH_VERSION)
      - name: Configure project
        run: cmake . -DPATCH_VERSION=${{ github.run_number }}  # Передаём номер сборки как PATCH_VERSION

      # Сборка проекта
      - name: Build project
        run: cmake --build .  # Запускаем процесс сборки

      # Запуск тестов
      - name: Run tests
        run: cmake --build . --target test  # Запускаем цель тестирования, если она существует

      # Упаковка проекта для macOS
      - name: Package for macOS
        run: cmake --build . --target package  # Создаём установочный пакет

      # Проверка на наличие уже существующего тега для данной версии
      - name: Check if tag exists
        run: |
          if git rev-parse "refs/tags/v${{ github.run_number }}-macos" >/dev/null 2>&1; then
            echo "Tag exists for macOS. Exiting..."
            exit 0  # Выходим, если тег для macOS уже существует
          fi

      # Создание релиза на GitHub для macOS
      - name: Create Release for macOS
        id: create_release_macos
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Используем токен для создания релиза
        with:
          tag_name: v${{ github.run_number }}-macos  # Название тега для релиза
          release_name: Release ${{ github.run_number }} for macOS  # Название релиза
          draft: false
          prerelease: false

      # Загрузка собранного пакета в релиз на GitHub
      - name: Upload macOS Release Asset
        id: upload_release_asset_macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Токен для загрузки артефакта
        with:
          upload_url: ${{ steps.create_release_macos.outputs.upload_url }}  # URL для загрузки артефакта
          asset_path: ./helloworld-0.0.${{ github.run_number }}-macOS.pkg  # Путь к пакету
          asset_name: helloworld-0.0.${{ github.run_number }}-macOS.pkg  # Имя файла пакета
          asset_content_type: application/octet-stream  # MIME-тип файла

  # Workflow для сборки и релиза на Linux
  build-linux:
    runs-on: ubuntu-latest  # Указываем, что сборка выполняется на Ubuntu
    permissions: write-all  # Разрешения для записи (для релизов и загрузки артефактов)
    steps:
      # Чекаут кода из репозитория
      - uses: actions/checkout@v3
        with:
          submodules: true  # Также чекаутим подмодули

      # Установка зависимостей для Linux через apt-get
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libboost-test-dev  # Устанавливаем Boost для тестирования

      # Конфигурация проекта для Linux
      - name: Configure project
        run: cmake . -DPATCH_VERSION=${{ github.run_number }}  # Устанавливаем PATCH_VERSION

      # Сборка проекта
      - name: Build project
        run: cmake --build .  # Запускаем процесс сборки

      # Запуск тестов
      - name: Run tests
        run: cmake --build . --target test  # Запускаем цель тестирования

      # Упаковка проекта для Linux
      - name: Package for Linux
        run: cmake --build . --target package  # Создаём DEB пакет

      # Проверка на наличие уже существующего тега для данной версии
      - name: Check if tag exists
        run: |
          if git rev-parse "refs/tags/v${{ github.run_number }}-linux" >/dev/null 2>&1; then
            echo "Tag exists for Linux. Exiting..."
            exit 0  # Выходим, если тег уже существует
          fi

      # Создание релиза на GitHub для Linux
      - name: Create Release for Linux
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Используем токен для создания релиза
        with:
          tag_name: v${{ github.run_number }}-linux  # Название тега для релиза
          release_name: Release ${{ github.run_number }} for Linux  # Название релиза
          draft: false
          prerelease: false

      # Загрузка собранного пакета в релиз на GitHub
      - name: Upload Linux Release Asset
        id: upload_release_asset_linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Токен для загрузки артефакта
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}  # URL для загрузки артефакта
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb  # Путь к пакету
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb  # Имя файла пакета
          asset_content_type: application/vnd.debian.binary-package  # MIME-тип файла
